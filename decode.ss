; *********************************************
; *  314 Principles of Programming Languages  *
; *  Fall 2016                              *
; *********************************************
;; -----------------------------------------------------
;; ENVIRONMENT
;; contains "ctv", "vtc",and "reduce" definitions
(load "include.ss")

;; contains a test document consisting of three paragraphs. 
(load "document.ss")

;; contains a test-dictionary, which has a much smaller dictionary for testing
;; the dictionary is needed for spell checking
(load "test-dictionary.ss")

;; (load "dictionary.ss") ;; the real thing with 45,000 words


;; -----------------------------------------------------
;; HELPER FUNCTIONS

;; *** CODE FOR ANY HELPER FUNCTION GOES HERE ***
(define (converter x)
  (or (and x 1) 0))

(define conv_enc
  (lambda (p n)
    (map (encode-n n) p)))

(define conv_num
  (lambda (p)
    (map (lambda (x)(converter (spell-checker x))) p)
    ))

(define add_p
  (lambda (p)
    (reduce + p 0)))

(define combine
  (lambda (p n)
    (add_p (conv_num (conv_enc p n)))))

(define try_all
  (lambda (p n)
        (cons (combine p n) (if (> n 0)
                                (try_all p (- n 1))
                                '()))))
(define index_of
  (lambda (l t)
    (if (null? l) 0
        (if (equal? t (car l))
            0
            (+ 1 (index_of (cdr l) t)) ))
    ))
(define index_of_max
  (lambda (p)
   (- 25 (index_of
     (try_all p 25) (apply max (try_all p 25))))
    ))

;; -----------------------------------------------------
;; SPELL CHECKER FUNCTION

;;check a word's spell correctness
;;INPUT:a word(a global variable "dictionary" is included in the file "test-dictionary.ss", and can be used directly here)
;;OUTPUT:true(#t) or false(#f)
(define spell-checker 
  (lambda (w)
    (if (member w dictionary) #t #f)
   ))

;; -----------------------------------------------------
;; ENCODING FUNCTIONS

;;generate an Caesar Cipher single word encoders
;;INPUT:a number "n"
;;OUTPUT:a function, whose input=a word, output=encoded word
(define encode-n
  (lambda (n);;"n" is the distance, eg. n=3: a->d,b->e,...z->c
    (lambda (w);;"w" is the word to be encoded
      (map vtc
           (map (lambda (y) (modulo y 26))
                (map (lambda(x) (+ n x))
                     (map ctv w))))
      )))

;;encode a document
;;INPUT: a document "d" and a "encoder"
;;OUTPUT: an encoded document using a provided encoder
(define encode-d;;this encoder is supposed to be the output of "encode-n"
  (lambda (d encoder)
    (map
     (lambda (x)
       (map encoder x)) d)
    ))
    
;; -----------------------------------------------------
;; DECODE FUNCTION GENERATORS
;; 2 generators should be implemented, and each of them returns a decoder

;;generate a decoder using brute-force-version spell-checker
;;INPUT:an encoded paragraph "p"
;;OUTPUT:a decoder, whose input=a word, output=decoded word
(define Gen-Decoder-A
 (lambda (p)
  (define decoder-n
    (lambda (n)
     (encode-n n)))
   
    (decoder-n (index_of_max p)))) 

    
    
;;generate a decoder using frequency analysis
;;INPUT:same as above
;;OUTPUT:same as above
(define Gen-Decoder-B
  (lambda (p)
    'SOME_CODE_GOES_HERE ;; *** FUNCTION BODY IS MISSING ***
    ))

;; -----------------------------------------------------
;; CODE-BREAKER FUNCTION

;;a codebreaker
;;INPUT: an encoded document(of course by a Caesar's Cipher), a decoder(generated by functions above)
;;OUTPUT: a decoded document
(define Code-Breaker
  (lambda (d decoder)
    (
     'SOME_CODE_GOES_HERE ;; *** FUNCTION BODY IS MISSING ***
     )))

;; -----------------------------------------------------
;; EXAMPLE APPLICATIONS OF FUNCTIONS
;;(spell-checker '(h e l l o))
;;(define add5 (encode-n 5))
;;(encode-d document add5)
;;(define decoderSP1 (Gen-Decoder-A paragraph))
;;(define decoderFA1 (Gen-Decoder-B paragraph))
;;(Code-Breaker document decoderSP1)
